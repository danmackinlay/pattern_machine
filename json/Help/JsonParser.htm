
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
 <hmtl>
 
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<title></title>
<meta name="Generator" content="Cocoa HTML Writer">
<meta name="CocoaVersion" content="824.42">
<style type="text/css">
p.p1 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica}
p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica; min-height: 14.0px}
p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; font: 9.0px Monaco; min-height: 12.0px}
p.p4 {margin: 0.0px 0.0px 0.0px 0.0px; font: 14.0px Helvetica}
p.p5 {margin: 0.0px 0.0px 0.0px 57.0px; text-indent: -57.0px; font: 9.0px Monaco; min-height: 12.0px}
p.p6 {margin: 0.0px 0.0px 0.0px 57.0px; text-indent: -57.0px; font: 12.0px Helvetica}
p.p7 {margin: 0.0px 0.0px 0.0px 57.0px; text-indent: -57.0px; font: 12.0px Helvetica; min-height: 14.0px}
p.p8 {margin: 0.0px 0.0px 0.0px 85.0px; text-indent: -85.0px; font: 12.0px Helvetica}
p.p9 {margin: 0.0px 0.0px 0.0px 57.0px; text-indent: -57.0px; font: 9.0px Monaco; color: #d40000}
p.p10 {margin: 0.0px 0.0px 0.0px 57.0px; text-indent: -57.0px; font: 9.0px Monaco}
p.p11 {margin: 0.0px 0.0px 0.0px 57.0px; text-indent: -57.0px; font: 14.0px Helvetica}
p.p12 {margin: 0.0px 0.0px 0.0px 57.0px; text-indent: -57.0px; font: 14.0px Helvetica; min-height: 17.0px}
p.p13 {margin: 0.0px 0.0px 0.0px 85.0px; text-indent: -85.0px; font: 12.0px Helvetica; min-height: 14.0px}
p.p14 {margin: 0.0px 0.0px 0.0px 0.0px; font: 9.0px Monaco; color: #d40000}
p.p15 {margin: 0.0px 0.0px 0.0px 0.0px; font: 9.0px Monaco}
span.s1 {font: 18.0px Helvetica}
span.s2 {color: #1200c4}
span.s3 {color: #1200c4}
span.s4 {color: #000000}
span.s5 {color: #1200c4}
span.s6 {color: #d40000}
span.s7 {font: 12.0px Helvetica; color: #000000}
span.s8 {color: #0000ff}
span.s9 {color: #1200c4}
span.Apple-tab-span {white-space:pre}
</style>
</head>
 <body>
 
<p class="p1"><span class="s1"><b>JsonParser<span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span></b></span><b> JsonParser is a parser class for JSON-serialized documents</b><span class="s1"><b><span class="Apple-tab-span">	</span></b></span></p>
<p class="p2"><br></p>
<p class="p1"><b>Inherits from: </b><b> Object </b></p>
<p class="p3"><br></p>
<p class="p1"> JSON is a lightweight format for serializing data and communication between languages. It supports hierarchical embedding of list and dictionary types and is spoken natively by browsers. This class supports decoding of strings using a single tokenization/parsing pass, which uses less memory than a two-pass process, but isn't as svelte as an evented stream decoder. Ah well.</p>
<p class="p2"><br></p>
<p class="p1"><b>See also:</b>  httpCOLON//json.org for the spec. </p>
<p class="p2"><br></p>
<p class="p4"><b>Other Issues</b></p>
<p class="p2"><br></p>
<p class="p1"> Note that a full JSON implementation appears to imply utf-8 encoding, which supercollider is coy about its support for. This parser is a little over-liberal with regard to missing or surplus commas.</a></p>
<p class="p2"><br></p>
 
<p class="p4"><b>Creation / Class Methods</b></p>
<p class="p5"><br></p>
 <p class="p5"><br></p>
 
<p class="p11"><b>Accessing Instance and Class Variables</b></p>
<p class="p7"><span class="Apple-tab-span">	</span></p>
 <p class="p11"><b> you must instantiate to use the parser, as state is stored in the instance. </b></p>
<p class="p12"><br></p>
<p class="p6"> Instantiation takes no arguments; pass the string you want to decode to the <strong>decode</strong> method of an instance. All other methods should be considered private. The parser object is re-usable if you wish to keep it around to decode multiple strings.</p>
<p class="p7"><span class="Apple-tab-span">	</span></p>
 <p class="p5"><br></p>
 
<p class="p6"><b><span class="Apple-tab-span">	</span>decode (jsonstr)</b></p>
 
<p class="p6"><b><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span></b> The public interface of the instance is this method. It sets up state then invokes sub parsers to walk through the string.</p>
 
<p class="p8"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span><b>    jsonstr </b>-  the string of JSON to parse.. Default value is nil.</p>
 
<p class="p7"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span></p>
<p class="p9"><span class="s4"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span></span>// Example</p>
<p class="p10"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span></p>
 <p class="p10"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span>    JsonParser.new.decode("[1,2,3]").postln ;</p> <p class="p10"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span>    </p> <p class="p5"><br></p>
 
<p class="p6"><b><span class="Apple-tab-span">	</span>parseValue (this)</b></p>
 
<p class="p6"><b><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span></b> (Private.) Parse unspecified object - first consume whitespace until unambiguous token found - then delegate to parser based on that token. TODO</p>
 <p class="p5"><br></p>
 
<p class="p6"><b><span class="Apple-tab-span">	</span>advanceCursor (inc )</b></p>
 
<p class="p6"><b><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span></b> (Private.) advance the cursor by a specified increment - usually 1, since that is the length of most tokens.</p>
 
<p class="p8"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span><b>    inc </b>-  cursor increment. Default value is 1.</p>
 <p class="p5"><br></p>
 
<p class="p6"><b><span class="Apple-tab-span">	</span>toCurrentToken (this)</b></p>
 
<p class="p6"><b><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span></b> (Private.) This method increments the cursor to the next non-whitespace character so that we are pointing to a real token.</p>
 <p class="p5"><br></p>
 
<p class="p6"><b><span class="Apple-tab-span">	</span>eatWhiteSpace (this)</b></p>
 
<p class="p6"><b><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span></b> (Private.) if there is whitespace under the  cursor, fast forward until there is not.</p>
 <p class="p5"><br></p>
 
<p class="p6"><b><span class="Apple-tab-span">	</span>parseObject (this)</b></p>
 
<p class="p6"><b><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span></b> (Private.) The token under the cursor is the opening curly brace of an object. parse it and successive characters accordingly </p>
 <p class="p5"><br></p>
 
<p class="p6"><b><span class="Apple-tab-span">	</span>parseAtom (this)</b></p>
 
<p class="p6"><b><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span></b> (Private.) The token under the cursor must be the start of [true|false|null].</p>
 <p class="p5"><br></p>
 
<p class="p6"><b><span class="Apple-tab-span">	</span>parseArray (this)</b></p>
 
<p class="p6"><b><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span></b> (Private.) The token under the is the opening brace of an array. Parse the successive characters as list contents.</p>
 <p class="p5"><br></p>
 
<p class="p6"><b><span class="Apple-tab-span">	</span>parseString (this)</b></p>
 
<p class="p6"><b><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span></b> (Private.) The token under the cursor is the first quote of a string. Parse the accordingly. (this string parser is a rule unto itself; there is a smaller bestiary of tokens inside strings than in lists or arrays, so we do it all by hand.</p>
 <p class="p5"><br></p>
 
<p class="p6"><b><span class="Apple-tab-span">	</span>parseNumber (this)</b></p>
 
<p class="p6"><b><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span></b> (Private.) The token under the cursor is the start of a number. Eat tokens so long as they are plausibly numeric, then try to parse them using the asFloat method. Could do with better handling of malformed numbers (with multiple decimal points, minus signs, exponents etc)</p>
 <p class="p5"><br></p>
 </body> </html>